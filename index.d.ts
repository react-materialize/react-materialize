declare module 'react-materialize' {
    import {Component} from 'react';

    export interface AutocompleteProps {
        /**
         * Uniquely identifies <input> generated by this component
         * Used by corresponding <label> for attribute
         */
        id?: string;
        className?: string;
        /**
         * The title of the autocomplete component.
         */
        title?: string;
        /**
         * An object with the keys of the items to match in autocomplete
         * The values are either null or a location to an image
         */
        data: Object;
        /**
         * Optional materialize icon to add to the autocomplete bar
         */
        icon?: string;
        iconClassName?: string;
        s?: number;
        m?: number;
        l?: number;
        offset?: string;
        /**
         * Determine input length before dropdown
         */
        minLength?: number;
        /**
         * The max amount of results that can be shown at once. Default: Infinity
         */
        limit?: number;
        /**
         * Placeholder for input element
         */
        placeholder?: string;
        /**
         * Called when the value of the input gets changed - by user typing or clicking on an auto-complete item.
         * Function signature: (event, value) => ()
         */
        onChange?: (...args: any[])=>any;
        /**
         * Called when auto-completed item is selected.
         * Function signature: (value) => ()
         */
        onAutocomplete?: (...args: any[])=>any;
        /**
         * The value of the input
         */
        value?: string;
    }

    export class Autocomplete extends Component<AutocompleteProps, any> {
        render(): JSX.Element;

    }

    export interface BadgeProps {
        children?: React.ReactNode;
        className?: string;
        /**
         * Add the <b>new</b> class name
         */
        newIcon?: boolean;
    }

    export function Badge(props: BadgeProps): JSX.Element;


    export interface BreadcrumbProps {
        children?: React.ReactNode;
        cols?: number;
    }

    export function Breadcrumb(props: BreadcrumbProps): JSX.Element;

    export type ButtonFab = 'vertical' | 'horizontal';

    export type ButtonModal = 'close' | 'confirm';

    export type ButtonWaves = 'light' | 'red' | 'yellow' | 'orange' | 'purple' | 'green' | 'teal';

    export interface ButtonProps {
        children?: React.ReactNode;
        className?: string;
        disabled?: boolean;
        /**
         * Enable other styles
         */
        flat?: boolean;
        large?: boolean;
        floating?: boolean;
        /**
         * Fixed action button
         * If enabled, any children button will be rendered as actions, remember to provide an icon.
         * @default vertical
         */
        fab?: ButtonFab;
        /**
         * The icon to display, if specified it will create a button with the material icon
         */
        icon?: string;
        modal?: ButtonModal;
        node?: React.ReactNode;
        onClick?: (...args: any[])=>any;
        /**
         * Tooltip to show when mouse hovered
         */
        tooltip?: string;
        waves?: ButtonWaves;
        /**
         * FAB Click-Only
         * Turns a FAB from a hover-toggle to a click-toggle
         */
        fabClickOnly?: boolean;
    }

    export class Button extends Component<ButtonProps, any> {
        render(): JSX.Element;

    }

    export interface CardProps {
        children?: React.ReactNode;
        className?: string;
        title?: string;
        textClassName?: string;
        reveal?: React.ReactElement<any>;
        header?: React.ReactElement<any>;
        actions?: React.ReactElement<any>[];
    }

    export function Card(props: CardProps): JSX.Element;

    export interface CardPanelProps {
        className?: string;
        children?: React.ReactNode;
    }

    export function CardPanel(props: CardPanelProps): JSX.Element;

    export interface CardTitleProps {
        children?: React.ReactNode;
        reveal?: boolean;
        waves?: any;
        image: string;
    }

    export class CardTitle extends Component<CardTitleProps, any> {
        render(): JSX.Element;

    }

    export interface CarouselOptions {
        duration?: number;
        dist?: number;
        shift?: number;
        padding?: number;
        fullWidth?: boolean;
        indicators?: boolean;
        noWrap?: boolean;
    }

    export interface CarouselProps {
        /**
         * Children to render as slider elements
         */
        children?: any;
        /**
         * Array of image url's
         */
        images?: string[];
        /**
         * Fixed element on slider
         */
        fixedItem?: React.ReactNode;
        /**
         * Additional classNames for carousel wrapper
         */
        className?: string;
        /**
         * Carousel ID for jQuery manipulating
         */
        carouselId?: string;
        /**
         * Carousel initialization options
         * <a href="http://materializecss.com/carousel.html">http://materializecss.com/carousel.html</a>
         */
        options?: CarouselOptions;
    }

    export class Carousel extends Component<CarouselProps, any> {
        render(): JSX.Element;

    }

    export interface ChipProps {
        children?: React.ReactNode;
        /**
         * If show a close icon
         * @default false
         */
        close?: boolean;
    }

    export function Chip(props: ChipProps): JSX.Element;

    export interface ColProps {
        children?: React.ReactNode;
        className?: string;
        /**
         * Columns for large size screens
         */
        l?: number;
        /**
         * Columns for middle size screens
         */
        m?: number;
        /**
         * The node to be used for the column
         * @default div
         */
        node?: React.ReactNode;
        /**
         * To offset, simply add s2 to the class where s signifies the screen
         * class-prefix (s = small, m = medium, l = large) and the number after
         * is the number of columns you want to offset by.
         */
        offset?: string;
        /**
         * Columns for small size screens
         */
        s?: number;
    }

    export function Col(props: ColProps): JSX.Element;

    export interface CollapsibleProps {
        /**
         * There are two ways a collapsible can behave. It can either allow multiple sections to stay open,
         * or it can only allow one section to stay open at a time, which is called an accordion.
         * @default false
         */
        accordion?: boolean;
        className?: string;
        children?: React.ReactNode;
        /**
         * Enable popout style
         */
        popout?: boolean;
        /**
         * The default CollapsibleItem that should be expanded. This value should match the specified
         * item's eventKey value. Ignored if accordion is false.
         */
        defaultActiveKey?: any;
        onSelect?: (...args: any[])=>any;
    }

    export class Collapsible extends Component<CollapsibleProps, any> {
        render(): JSX.Element;

    }

    export type CollapsibleItemScroll = 'auto' | 'instant' | 'smooth';

    export interface CollapsibleItemProps {
        header: any;
        icon?: string;
        iconClassName?: string;
        children?: React.ReactNode;
        onSelect?: (...args: any[])=>any;
        /**
         * If the item is expanded by default. Overridden if the parent Collapsible is an accordion.
         * @default false
         */
        expanded?: boolean;
        /**
         * The value to pass to the onSelect callback.
         */
        eventKey?: any;
        className?: string;
        /**
         * The node type of the header
         * @default a
         */
        node?: React.ReactNode;
        /**
         * The scroll behavior for scrollIntoView
         */
        scroll?: CollapsibleItemScroll;
    }

    export interface CollectionProps {
        children?: React.ReactNode;
        header?: React.ReactNode;
    }

    export class Collection extends Component<CollectionProps, any> {
        render(): JSX.Element;

    }

    export interface CollectionItemProps {
        active?: boolean;
        children?: React.ReactNode;
        className?: string;
        href?: string;
    }

    export class CollectionItem extends Component<CollectionItemProps, any> {
        render(): JSX.Element;

    }

    export interface ContainerProps {
        children?: React.ReactNode;
    }

    export  function Container(props: ContainerProps): JSX.Element;

    export function Divider(): JSX.Element;

    export interface DropdownOptions {
        inDuration?: number;
        outDuration?: number;
        constrainWidth?: boolean;
        hover?: boolean;
        gutter?: number;
        belowOrigin?: boolean;
        alignment?: 'left' | 'right';
    }

    export interface DropdownProps {
        /**
         * The node to trigger the dropdown
         */
        trigger: React.ReactNode;
        children?: React.ReactNode;
        className?: string;
        /**
         * Options hash for the dropdown
         * more info: http://materializecss.com/dropdown.html#options
         */
        options?: DropdownOptions;
    }

    export class Dropdown extends Component<DropdownProps, any> {
        render(): JSX.Element;

    }

    export interface FooterProps {
        children?: React.ReactNode;
        className?: string;
        copyrights?: string;
        links?: React.ReactNode;
        moreLinks?: React.ReactNode;
    }

    export class Footer extends Component<FooterProps, any> {
        render(): JSX.Element;

    }

    export interface IconProps {
        /**
         * Classname passed to i tag
         */
        className?: string;
        /**
         * Icon type: <a href='https://material.io/icons/'>https://material.io/icons/</a>
         */
        children?: string;
        /**
         * Placement for icon if used beside a text ↓
         */
        left?: boolean;
        center?: boolean;
        right?: boolean;
        /**
         * Sizes for icons ↓
         */
        tiny?: boolean;
        small?: boolean;
        medium?: boolean;
        large?: boolean;
    }

    export function Icon(props: IconProps): JSX.Element;

    export type InputValue = string | any[];

    export interface InputProps {
        s?: number;
        m?: number;
        l?: number;
        children?: React.ReactNode;
        className?: string;
        labelClassName?: string;
        label?: React.ReactNode;
        error?: string;
        success?: string;
        /**
         * Input field type, e.g. select, checkbox, radio, text, tel, email
         * @default 'text'
         */
        type?: string;
        defaultValue?: any;
        placeholder?: string;
        id?: string;
        icon?: string;
        name?: string;
        validate?: boolean;
        multiple?: boolean;
        browserDefault?: boolean;
        checked?: boolean;
        onLabel?: string;
        offLabel?: string;
        onChange?: (...args: any[])=>any;
        options?: any;
        /**
         * Value used to set a initial value
         */
        value?: InputValue;
    }

    export class Input extends Component<InputProps, any> {
        render(): JSX.Element;

    }

    export interface MediaBoxProps {
        className?: string;
        /**
         * The caption shown below the image when opened
         */
        caption?: string;
        /**
         * The path to the image
         */
        src: string;
    }

    export class MediaBox extends Component<MediaBoxProps, any> {
        render(): JSX.Element;

    }

    export interface MenuItemProps {
        className?: string;
        children?: React.ReactNode;
        breadcrumbItem?: boolean;
        /**
         * The link for the anchor
         */
        href?: string;
    }

    export class MenuItem extends Component<MenuItemProps, any> {
        render(): JSX.Element;

    }

    export interface ModalModalOptions {
        dismissible?: boolean;
        opacity?: number;
        inDuration?: number;
        outDuration?: number;
        startingTop?: string;
        endingTop?: string;
        ready?: (...args: any[])=>any;
        complete?: (...args: any[])=>any;
    }

    export interface ModalProps {
        /**
         * ModalOptions
         * Object with options for modal
         */
        modalOptions?: ModalModalOptions;
        /**
         * BottomSheet styled modal
         * @default false
         */
        bottomSheet?: boolean;
        /**
         * Component children
         */
        children?: React.ReactNode;
        /**
         * FixedFooter styled modal
         * @default false
         */
        fixedFooter?: boolean;
        /**
         * Text to shown in the header of the modal
         */
        header?: string;
        /**
         * The button to trigger the display of the modal
         */
        trigger?: React.ReactNode;
        /**
         * The buttons to show in the footer of the modal
         * @default <Button>Close</Button>
         */
        actions?: React.ReactNode;
        /**
         * The ID to trigger the modal opening/closing
         */
        id?: string;
    }

    export class Modal extends Component<ModalProps, any> {
        render(): JSX.Element;

    }

    export interface NavbarOptions {
        menuWidth?: number;
        edge?: 'left' | 'right';
        closeOnClick?: boolean;
        draggable?: boolean;
    }

    export interface NavbarProps {
        brand?: React.ReactNode;
        children?: React.ReactNode;
        className?: string;
        left?: boolean;
        right?: boolean;
        href?: string;
        /**
         * Makes the navbar fixed
         */
        fixed?: boolean;
        /**
         * Options hash for the sidenav.
         * More info: http://materializecss.com/side-nav.html#options
         */
        options?: NavbarOptions;
    }

    export class Navbar extends Component<NavbarProps, any> {
        render(): JSX.Element;

    }

    export type NavItemChildren = string | React.ReactNode;

    export interface NavItemProps {
        /**
         * children can be a string value or a node
         */
        children?: NavItemChildren;
        divider?: boolean;
        href?: string;
    }

    export function NavItem(props: NavItemProps): JSX.Element;

    export interface OverlayProps {
        container: any;
    }

    export class Overlay extends Component<OverlayProps, any> {
        render(): JSX.Element;

    }

    export interface OverlayTriggerModalOptions {
        dismissible?: boolean;
        opacity?: number;
        inDuration?: number;
        outDuration?: number;
        startingTop?: string;
        endingTop?: string;
        ready?: (...args: any[])=>any;
        complete?: (...args: any[])=>any;
    }

    export interface OverlayTriggerProps {
        /**
         * ModalOptions
         * Object with options for modal
         */
        modalOptions?: OverlayTriggerModalOptions;
        overlay?: React.ReactNode;
    }

    export class OverlayTrigger extends Component<OverlayTriggerProps, any> {
        render(): JSX.Element;

    }

    export interface PaginationProps {
        /**
         * Number of items in the component
         */
        items: number;
        /**
         * The initial activePage
         */
        activePage?: number;
        children?: React.ReactNode;
        className?: string;
        maxButtons?: number;
        onSelect?: (...args: any[])=>any;
    }

    export class Pagination extends Component<PaginationProps, any> {
        render(): JSX.Element;

    }

    export interface PaginationButtonProps {
        active?: boolean;
        children?: React.ReactNode;
        className?: string;
        disabled?: boolean;
        href?: string;
        onSelect?: (...args: any[])=>any;
    }

    export function PaginationButton(props: PaginationButtonProps): JSX.Element;

    export interface ParallaxProps {
        className?: string;
        /**
         * The image path which will be used for the background of the parallax
         */
        imageSrc?: string;
    }

    export class Parallax extends Component<ParallaxProps, any> {
        render(): JSX.Element;

    }

    export type PreloaderSize = 'big' | 'small' | 'medium';

    export type PreloaderColor = 'blue' | 'red' | 'yellow' | 'green';

    export interface PreloaderProps {
        className?: string;
        /**
         * The scale of the circle
         * @default 'medium'
         */
        size?: PreloaderSize;
        /**
         * Whether to spin
         * @default true
         */
        active?: boolean;
        /**
         * The color of the circle, if not flashing
         * @default 'blue'
         */
        color?: PreloaderColor;
        /**
         * Wheter to circle four different colors
         * @default false
         */
        flashing?: boolean;
    }

    export class Preloader extends Component<PreloaderProps, any> {
        render(): JSX.Element;

    }

    export interface ProgressBarProps {
        className?: string;
        /**
         * A number between 0..100 that indicates the current progress,
         * when provided, a determinate bar with the progress is displayed,
         * otherwise a indeterminate bar is shown
         */
        progress?: number;
    }

    export function ProgressBar(props: ProgressBarProps): JSX.Element;

    export interface RowProps {
        children?: React.ReactNode;
        className?: string;
        node?: React.ReactNode;
    }

    export function Row(props: RowProps): JSX.Element;

    export function SearchForm(): JSX.Element;

    export interface SectionProps {
        children?: React.ReactNode;
    }

    export function Section(props: SectionProps): JSX.Element;

    export interface SideNavOptions {
        menuWidth?: number;
        edge?: 'left' | 'right';
        closeOnClick?: boolean;
        draggable?: boolean;
    }

    export interface SideNavProps {
        /**
         * sidenav id. If none is passed, an id will be generated.
         */
        id?: string;
        /**
         * Component that is rendered to trigger the sidenav
         */
        trigger: React.ReactNode;
        /**
         * Options hash for the sidenav.
         * More info: http://materializecss.com/side-nav.html#options
         */
        options?: SideNavOptions;
        children?: React.ReactNode;
    }

    export class SideNav extends Component<SideNavProps, any> {
        render(): JSX.Element;

    }

    export interface SideNavItemProps {
        children?: React.ReactNode;
        divider?: boolean;
        subheader?: boolean;
        userView?: boolean;
        waves?: boolean;
        href?: string;
        icon?: string;
        user?: any;
    }

    export class SideNavItem extends Component<SideNavItemProps, any> {
        render(): JSX.Element;

    }

    export interface SlideProps {
        /**
         * Aliment of the caption
         * @default 'center'
         */
        placement?: any;
        className?: string;
        children?: React.ReactNode;
        /**
         * The tagline of the caption
         */
        title?: string;
        /**
         * The path of the background image
         */
        src: string;
    }

    export class Slide extends Component<SlideProps, any> {
        render(): JSX.Element;

    }

    export interface SliderProps {
        className?: string;
        children?: React.ReactNode;
        fullscreen?: boolean;
        /**
         * Set to false to hide slide indicators
         * @default true
         */
        indicators?: boolean;
        /**
         * The interval between transitions in ms
         * @default 6000
         */
        interval?: number;
        /**
         * The duration of the transation animation in ms
         * @default 500
         */
        transition?: number;
    }

    export class Slider extends Component<SliderProps, any> {
        render(): JSX.Element;

    }

    export interface SpinnerProps {
        color?: string;
        only?: boolean;
    }

    export function Spinner(props: SpinnerProps): JSX.Element;

    export interface TabProps {
        /**
         * The title shown in the tabs list
         */
        title: React.ReactNode;
        /**
         * The width of the Tab
         */
        tabWidth?: number;
        /**
         * Pre-select the tab
         * @default false
         */
        active?: boolean;
        /**
         * Disable the tab
         * @default false
         */
        disabled?: boolean;
    }

    export class Tab extends Component<TabProps, any> {
        render(): JSX.Element;

    }

    export interface TableProps {
        className?: string;
        children?: React.ReactNode;
        /**
         * Center align all the text in the table
         * @default false
         */
        centered?: boolean;
        /**
         * Highlight the row that's hovered
         * @default false
         */
        hoverable?: boolean;
        /**
         * Enable response to make the table horizontally scrollable on smaller screens
         * @default false
         */
        responsive?: boolean;
        /**
         * striped style
         * @default false
         */
        striped?: boolean;
        /**
         * Add border to each row
         * @default false
         */
        bordered?: boolean;
    }

    export class Table extends Component<TableProps, any> {
        render(): JSX.Element;

    }

    export interface TabsTabOptions {
        onShow?: (...args: any[])=>any;
        swipeable?: boolean;
        responsiveThreshold?: number;
    }

    export interface TabsProps {
        children: React.ReactNode;
        className?: string;
        defaultValue?: string;
        onChange?: (...args: any[])=>any;
        /**
         * More info
         * <a href='http://materializecss.com/tabs.html'>http://materializecss.com/tabs.html</a>
         */
        tabOptions?: TabsTabOptions;
    }

    export class Tabs extends Component<TabsProps, any> {
        render(): JSX.Element;

    }

    export interface TagProps {
        children?: React.ReactNode;
    }

    export function Tag(props: TagProps): JSX.Element;

    export interface ToastProps {
        toast: string;
        children?: React.ReactNode;
        rounded?: boolean;
    }

    export class Toast extends Component<ToastProps, any> {
        render(): JSX.Element;

    }

    export interface UserViewProps {
    }

    export class UserView extends Component<UserViewProps, any> {
        render(): JSX.Element;

    }

}

